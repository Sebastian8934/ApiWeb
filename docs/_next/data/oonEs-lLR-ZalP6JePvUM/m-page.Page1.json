{"pageProps":{"initialState":{"dolanData":{},"dolanConfig":{},"isLoading":false,"isAuthenticated":false,"isDolanReady":true,"didInvalidateDolan":false,"spinnerText":"","spinnerBackgroundColor":null,"dolanTimestamp":1644224513655,"navConfig":{"blueprint":"legacy","legacyLayouts":{"webMenuType":"side_left"},"initPageId":"page.Page1","defaultPageId":"page.Page1","authenticationEnabled":false,"authPageId":"page.Page1","enabled":true,"headerEnabled":true,"headerText":"","tabs":[{"title":"Empty page","name":"t0"},{"title":"Empty page","name":"t1"}],"screens":["page.Page1","page.Page2"],"routeConfigs":{"t0":{"initialRouteName":"page.Page1","iconName":"home"},"Login":{},"t1":{"initialRouteName":"page.Page1","iconName":"arrow-down"}}}},"route":{"name":"m-page.Page1","key":"m-page.Page1"},"screens":{"page.Page1":{"initStateProps":{"ec1c8d05-4e29-4484-aaea-95b870562cc0":["source","description"]},"pageFlowId":"page:1","pageId":"page.Page1","title":"Empty page","disableSafeArea":false,"scrollDisabled":false,"parameters":{},"pageVariables":{},"dataReferences":{"listUserAll1":[]},"dataResources":[{"query":{},"action_name":"data.findAll","resource_name":"listUserAll","reference_name":"listUserAll1","data_canvas_flow_id":"data:listUserAll153582012"}],"events":{"onPageDidMount":[{"id":"7c9332d1.1fc32c"},{"id":"dfc195adc3d9e.969f74ad9cfb7"}]},"components":[{"id":"1-bbf450d6-3e2c-4a35-b99a-bd6a98e6dd0f","ch":[{"id":"ab53c9c6-0662-4d7d-a941-53189ca583ca","ch":[{"id":"1b605459-303b-46fe-836e-b366f0afa751","ch":[{"id":"ec1c8d05-4e29-4484-aaea-95b870562cc0","ch":[{"id":"fd3afa37-c39c-4de6-ab65-5e260124733f"},{"id":"d69a854c-a10a-471d-82b9-34a2c4f3c876","ch":[{"id":"459e0db4-241b-40d1-b7f3-63d565a46474"},{"id":"60b34f54-a87f-4d52-bb52-7f3f1c9603c0"}]}]}]}]}]}]},"page.Page2":{"initStateProps":{},"pageFlowId":"page:2","pageId":"page.Page2","title":"Global canvas","isGlobalCanvas":true,"disableSafeArea":false,"scrollDisabled":false,"parameters":{},"pageVariables":{},"events":{},"components":[{"id":"2-edebab26-796f-4ea8-9903-3350542f889a"}]}},"flows":[{"x":420,"y":50,"z":"own_1d6d336a.9126c","id":"10544d20.64c85","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"response":{"key":"response@@@1ed52ea2.56495","source":"node"}},"source":"object"}},{"x":420,"y":50,"z":"own_8fe6bea6.1072","id":"1333ac45.8009c","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"response":{"key":"response@@@6afc87de.47ec9","source":"node"}},"source":"object"}},{"x":210,"y":40,"z":"own_97b54227.3b127","id":"147f90f1.617fe","func":"const {\n  time,\n  unit,\n} = msg;\n\nconst unitCoefficientMap = {\n  ms: 1,\n  s: 1000,\n  min: 1000 * 60,\n  h: 1000 * 60 * 60,\n};\n\nif (time <= 0) {\n  return msg;\n}\n\nconst timeToWait = time * unitCoefficientMap[unit];\n\nif (supersonic.api.delay) {\n  supersonic.api.delay(() => { node.send(msg); }, timeToWait, msg.contextId);\n} else {\n  setTimeout(() => {\n    node.send(msg);\n  }, timeToWait);\n}","name":"Delay","type":"function","noerr":0,"wires":[[]],"outputs":1},{"x":420,"y":50,"z":"own_105ec0bb.2f7d7","id":"15f7596e.557a0","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{},"source":"object"}},{"x":210,"y":40,"z":"own_d51109f.3b25d","id":"19b93bf3.89208","func":"const { request, contextId, supersonic } = inputs;\nconst { resourceName, id, parameters = {} } = request;\n\nconst { getComponentContextProp } = supersonic.context;\nconst { getResourceConfig } = supersonic.api.data;\nconst { prepareExecutable } = supersonic.api.formulas || {};\n\nconst get = (p, o) => {\n  const isNumber = (v) => typeof v === 'number';\n  const isBoolean = (v) => typeof v === 'boolean';\n  const isNull = (v) => v === null;\n  const isString = (v) => typeof v === 'string';\n  return p.reduce((xs, x) => (\n    xs && (xs[x] || isNumber(xs[x]) || isBoolean(xs[x]) || isNull(xs[x]) || isString(xs[x])) ? xs[x] : undefined\n  ), o);\n};\n\nconst importRecord = (record, mappingFields = []) => {\n  const importedData = {};\n  mappingFields.forEach((field) => {\n    if (field && field.mappingExpression && prepareExecutable) {\n      try {\n        const expression = prepareExecutable(JSON.parse(field.mappingExpression));\n        importedData[field.propertyName] = expression.execute({ source: { record } });\n      } catch (error) {\n        throw new Error('An error occured while executing mapping formula.');\n      }\n    } else if (field && field.mapping && Array.isArray(field.mapping)) {\n      const value = get(field.mapping, record);\n      if (value !== undefined) {\n        importedData[field.propertyName] = value;\n      }\n    }\n  });\n  return importedData;\n};\n\nconst adapterPrefix = 'adapter';\nconst [prefix, boundResource] = (resourceName || '').split(':');\nconst isAdapter = prefix === adapterPrefix;\n\nconst getActualResourceName = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return (\n      get(['mapping', 'value'], adapterProp) || get(['value'], adapterProp) || resourceName\n    );\n  }\n  return resourceName;\n};\n\nconst getMapping = () => (\n  isAdapter\n    ? get(['mapping', 'fields'], getComponentContextProp(contextId.rootContextId, boundResource, contextId, true))\n    : null\n);\n\nconst getAdapterFields = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return ['identifier', 'authConfig'].reduce((adapterFields, field) => {\n      const value = get(['mapping', field], adapterProp) || get([field], adapterProp);\n      return value ? { ...adapterFields, [field]: value } : adapterFields;\n    }, {});\n  }\n  return {};\n};\n\n// TODO: should be handled in odata driver in a future version of\n// api-configurator using string schema format field set to \"uuid\"\nconst uuidMatcher = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nconst fixIdentifierValue = (value) => (value && typeof value === 'string' && !uuidMatcher.test(value) ? `'${value}'` : value);\nconst prepareQuery = (query, resourceType) => {\n  if (resourceType === 'odata' && query.identifier && Object.keys(query.identifier).length > 1) {\n    return { ...query, identifier: Object.keys(query.identifier).reduce((acc, key) => ({ ...acc, [key]: fixIdentifierValue(query.identifier[key]) }), {}) };\n  }\n  return query;\n};\n\nconst mappingFields = getMapping(resourceName);\nconst isMappedAdapter = isAdapter && !!mappingFields;\n\nasync function makeRequest() {\n  const resourceConfig = getResourceConfig(getActualResourceName(resourceName));\n  const { driverConfiguration = {} } = resourceConfig;\n  const resourceType = resourceConfig.type || driverConfiguration.type;\n\n  if (!resourceConfig) {\n    throw new Error(`Couldn't find data resource with given name: ${resourceName}.`);\n  }\n\n  // Load a local data resource\n  if (resourceType === 'local') {\n    const { appId } = await supersonic.api.app.getAppId();\n    const key = `local-resource:${appId}:${resourceName}:${id}`;\n    const { data: record } = await supersonic.api.asyncStorage.getItem({ key });\n    if (record != null && typeof record === 'object' && typeof record.id !== 'undefined') {\n      return record;\n    }\n    throw new Error(`Record ${resourceName} with ID ${id} not found`);\n  }\n  if (resourceType === 'agdb') {\n    const data = await supersonic.resource.find(resourceConfig.agdb_id, id, {});\n    return data && data.value && data.value.object;\n  }\n  if (supersonic.api.data.drivers && resourceType in supersonic.api.data.drivers) {\n    const driver = supersonic.api.data.drivers[resourceType];\n    if (!driver.execute) {\n      throw new Error(`Invalid or missing driver for Resource ${resourceName}`);\n    }\n    let { authConfig } = request;\n    if (resourceType === 'firestore') {\n      try {\n        const { firebase } = supersonic.api;\n        const currentUser = await new Promise((resolve, reject) => {\n          const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n            unsubscribe();\n            resolve(user);\n          }, reject);\n        });\n        const token = await currentUser.getIdToken();\n        authConfig = {\n          type: 'bearer',\n          authToken: token,\n        };\n      } catch (err) {\n        /* ignore error and attempt query anyway */\n      }\n    }\n    const agQuery = prepareQuery({\n      resource: resourceConfig,\n      operation: 'retrieve',\n      authConfig,\n      ...request,\n      ...getAdapterFields(),\n    }, resourceType);\n    const response = await driver.execute(agQuery);\n    if (!response || response.message) {\n      if (resourceType === 'firestore') {\n        let code; let message; let status;\n        try {\n          ({ code, message, status } = response.driverRawError.response.data.error);\n        } catch (e) {\n          message = response.message;\n        }\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          type: 'firestore',\n          code,\n          message,\n          status,\n        };\n      }\n      throw new Error(response ? response.message : 'Request failed');\n    }\n    const record = response.record || response.data || null;\n    return record;\n  }\n  // Load a \"REST\" data resource\n  const operation = resourceConfig.operations.retrieve;\n  if (!operation) {\n    throw new Error(`Resource ${resourceName} does not support getting a single record`);\n  }\n  const requestParameters = [\n    ...resourceConfig.parameters,\n    ...operation.parameters,\n  ];\n  const headers = {};\n  const queryComponents = [];\n  let url = `${resourceConfig.base_url}${operation.relative_path || ''}`;\n  requestParameters.forEach((parameter) => {\n    let value = !isAdapter ? parameters[parameter.id]\n      : get(['identifier', parameter.placement_key], request);\n    if (parameter.is_static || typeof value === 'undefined') {\n      value = parameter.default;\n    }\n    if (value == null) {\n    // No value for this parameter\n      if (parameter.is_optional) {\n        return;\n      }\n      throw new Error(`Missing required parameter ${JSON.stringify(parameter.title)}`);\n    }\n    // Map the parameter to headers/URL/query\n    const { placement } = parameter;\n    const placementKey = parameter.placement_key;\n    if (placement === 'header') {\n      // Add to headers\n      headers[placementKey] = value;\n    } else if (placement === 'query') {\n      // Add to the URL as a query parameter\n      queryComponents.push(`${encodeURIComponent(placementKey)}=${encodeURIComponent(String(value))}`);\n    } else if (placement === 'path') {\n      // Replace the placeholder in the URL with escaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), encodeURIComponent(String(value)));\n    } else if (placement === 'url') {\n      // Replace the placeholder in the URL with unescaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), String(value));\n    }\n  });\n  // Add any query parameters to the URL\n  if (queryComponents.length) {\n    const newQuery = queryComponents.join('&');\n    url = url.replace(/(?:\\?(.*))?$/, (_, query) => (query ? `?${query}&${newQuery}` : `?${newQuery}`));\n  }\n  // Perform the request\n  const response = await fetch(url, { method: 'GET', headers });\n  if (!response.ok) {\n    throw response;\n  }\n  let result = await response.json();\n  const resultPath = operation.response_key_path ? operation.response_key_path.split('.') : [];\n  while (result != null && resultPath.length) {\n    result = result[resultPath.shift()];\n  }\n  if (!result) {\n    throw new Error(`A ${resourceName} record not found from the response!`);\n  }\n  return result;\n}\n\ntry {\n  const record = await makeRequest();\n  if (Array.isArray(record)) {\n    const errorStr = 'The server responded with a list for a single data record. The response must be an object.';\n    return [1, {\n      error: {\n        code: 'responseMustBeObject',\n        status: -1,\n        message: errorStr,\n        rawError: new Error(errorStr),\n      },\n    }];\n  }\n\n  return [0, { record: !isMappedAdapter ? record : importRecord(record, mappingFields) }];\n} catch (error) {\n  // eslint-disable-next-line no-console\n  // console.warn(error);\n  if (error.type === 'firestore') {\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.code,\n        message: `${error.status}: ${error.message}`,\n      },\n    }];\n  }\n\n  let errorStr = String(error);\n\n  if (errorStr.startsWith('Error: Couldn\\'t find data resource')) {\n    return [1, {\n      error: {\n        code: 'resourceNotFound',\n        status: 404,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  if (errorStr === 'TypeError: Failed to fetch') {\n    errorStr += '. Does the server allow CORS?';\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.status,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  } if (!error.json) {\n    return [1, {\n      error: {\n        code: 'unknown',\n        status: -1,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  let rawError;\n  try {\n    const body = await error.json();\n    rawError = body;\n    errorStr = `JSON error response from server: ${JSON.stringify(body)}.`;\n  } catch {\n    errorStr = 'Non-JSON error body.';\n    rawError = { message: errorStr };\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    return [1, {\n      error: {\n        code: 'serverError',\n        status: error.status,\n        message: errorStr,\n        rawError,\n      },\n    }];\n  }\n}","name":"Get record","type":"function2","noerr":0,"wires":[["c55913f3.8d802"],["731bd1e9.4983c"]],"outputs":2,"function_inputs":{"key":{"request":{"key":"request","source":"input"},"contextId":{"key":"contextId","source":"msg"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{"record":{"name":"record","type":"dataResourceRetrieveResponse","title":"Record","description":"The successfully retrieved record."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown","responseMustBeObject"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while fetching the record.\n- `responseMustBeObject`: Thrown if the server does not return an object as a response for a single data record request."}},"additionalProperties":false}]},{"x":420,"y":100,"z":"own_21057d66.1a85e","id":"1b4bfc12.808a7","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"error":{"key":"error@@@441d4b92.6ac8d","source":"node"}},"source":"object"}},{"x":420,"y":100,"z":"own_100f5064.6f140","id":"1c88f5a9.1d6dc","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"error":{"key":"error@@@f0bf1a1a.10aa3","source":"node"}},"source":"object"}},{"x":210,"y":40,"z":"own_91f3e62e.3f65c","id":"1eb859fe.2c9fd","func":"const { supersonic, contextId } = inputs;\nawait supersonic.api.spinner.hide(contextId);","name":"Hide spinner","type":"function2","noerr":0,"wires":[["2efe9993.2abdf"]],"outputs":1,"function_inputs":{"key":{"contextId":{"key":"contextId","source":"msg"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{},"additionalProperties":false}]},{"x":210,"y":40,"z":"own_1d6d336a.9126c","id":"1ed52ea2.56495","func":"const { request, contextId, supersonic } = inputs;\nconst { resourceName, properties = {}, parameters = {} } = request;\n\nconst { getComponentContextProp } = supersonic.context;\nconst { getResourceConfig } = supersonic.api.data;\nconst { prepareExecutable } = supersonic.api.formulas || {};\n\nconst get = (p, o) => {\n  const isNumber = (v) => typeof v === 'number';\n  const isBoolean = (v) => typeof v === 'boolean';\n  const isNull = (v) => v === null;\n  const isString = (v) => typeof v === 'string';\n  return p.reduce((xs, x) => (\n    xs && (xs[x] || isNumber(xs[x]) || isBoolean(xs[x]) || isNull(xs[x]) || isString(xs[x])) ? xs[x] : undefined\n  ), o);\n};\n\nconst importRecord = (record, mappingFields = []) => {\n  const importedData = {};\n  mappingFields.forEach((field) => {\n    if (field && field.mappingExpression && prepareExecutable) {\n      try {\n        const expression = prepareExecutable(JSON.parse(field.mappingExpression));\n        importedData[field.propertyName] = expression.execute({ source: { record } });\n      } catch (error) {\n        throw new Error('An error occured while executing mapping formula.');\n      }\n    } else if (field && field.mapping && Array.isArray(field.mapping)) {\n      const value = get(field.mapping, record);\n      if (value !== undefined) {\n        importedData[field.propertyName] = value;\n      }\n    }\n  });\n  return importedData;\n};\n\nconst setNestedProp = (obj = {}, [first, ...rest], value) => ({\n  ...obj,\n  [first]: rest.length\n    ? setNestedProp(obj[first], rest, value)\n    : value,\n});\n\nconst exportRecord = (record, mappingFields = []) => {\n  let exportedRecord = {};\n  mappingFields.forEach((field) => {\n    if (field && field.mapping && Array.isArray(field.mapping)) {\n      exportedRecord = setNestedProp(exportedRecord, field.mapping, get([field.propertyName], record));\n    }\n  });\n  return exportedRecord;\n};\n\nconst exportResourceConfig = (resourceConfig, mappingFields) => {\n  const exportedResourceConfig = { ...resourceConfig };\n  if (resourceConfig.record) {\n    exportedResourceConfig.record = exportRecord(resourceConfig.record, mappingFields);\n  }\n  return exportedResourceConfig;\n};\n\nconst adapterPrefix = 'adapter';\nconst [prefix, boundResource] = (resourceName || '').split(':');\nconst isAdapter = prefix === adapterPrefix;\n\nconst getActualResourceName = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return (\n      get(['mapping', 'value'], adapterProp) || get(['value'], adapterProp) || resourceName\n    );\n  }\n  return resourceName;\n};\n\nconst getMapping = () => (\n  isAdapter\n    ? get(['mapping', 'fields'], getComponentContextProp(contextId.rootContextId, boundResource, contextId, true))\n    : null\n);\n\nconst getAdapterFields = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return ['authConfig'].reduce((adapterFields, field) => {\n      const value = get(['mapping', field], adapterProp) || get([field], adapterProp);\n      return value ? { ...adapterFields, [field]: value } : adapterFields;\n    }, {});\n  }\n  return {};\n};\n\nconst mappingFields = getMapping(resourceName);\nconst isMappedAdapter = isAdapter && !!mappingFields;\n\nasync function makeRequest() {\n  const resourceConfig = getResourceConfig(getActualResourceName(resourceName));\n  const { driverConfiguration = {} } = resourceConfig;\n  const resourceType = resourceConfig.type || driverConfiguration.type;\n\n  if (!resourceConfig) {\n    throw new Error(`Couldn't find data resource with given name: ${resourceName}.`);\n  }\n\n  // Create a local data resource\n  if (resourceType === 'local') {\n    const { id } = properties;\n    if (id == null) {\n      throw new Error(`Missing ${resourceName} record ID`);\n    }\n    const { appId } = await supersonic.api.app.getAppId();\n    const key = `local-resource:${appId}:${resourceName}:${id}`;\n    const { data: record } = await supersonic.api.asyncStorage.getItem({ key });\n    if (record != null && typeof record === 'object' && typeof record.id !== 'undefined') {\n      throw new Error(`Record ${resourceName} with ID ${id} already exists`);\n    }\n    await supersonic.api.asyncStorage.setItem({\n      key, data: !isMappedAdapter ? properties : exportRecord(request.record, mappingFields),\n    });\n    return properties;\n  }\n  // Create an AGDB data resource\n  if (resourceType === 'agdb') {\n    const data = await supersonic.resource.create(resourceConfig.agdb_id, { object: properties });\n    return data && data.value && data.value.object;\n  }\n  if (supersonic.api.data.drivers && resourceType in supersonic.api.data.drivers) {\n    const driver = supersonic.api.data.drivers[resourceType];\n    if (!driver.execute) {\n      throw new Error(`Invalid or missing driver for Resource ${resourceName}`);\n    }\n    let { authConfig } = request;\n    if (resourceType === 'firestore') {\n      try {\n        const { firebase } = supersonic.api;\n        const currentUser = await new Promise((resolve, reject) => {\n          const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n            unsubscribe();\n            resolve(user);\n          }, reject);\n        });\n        const token = await currentUser.getIdToken();\n        authConfig = {\n          type: 'bearer',\n          authToken: token,\n        };\n      } catch (err) {\n        /* ignore error and attempt query anyway */\n      }\n    }\n    let agQuery = {\n      resource: resourceConfig,\n      operation: 'create',\n      authConfig,\n      ...request,\n      ...getAdapterFields(),\n    };\n    if (isMappedAdapter) {\n      agQuery = exportResourceConfig(agQuery, mappingFields);\n    }\n    const response = await driver.execute(agQuery);\n    if (!response || response.message) {\n      if (resourceType === 'firestore') {\n        let code; let message; let status;\n        try {\n          ({ code, message, status } = response.driverRawError.response.data.error);\n        } catch (e) {\n          message = response.message;\n        }\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          type: 'firestore',\n          code,\n          message,\n          status,\n        };\n      }\n      throw new Error(response ? response.message : 'Request failed');\n    }\n    const record = response.record || response.data || null;\n    return record;\n  }\n  // Create a \"REST\" data resource\n  const operation = resourceConfig.operations.create;\n  if (!operation) {\n    throw new Error(`Resource ${resourceName} does not support creating new records`);\n  }\n  const requestParameters = [\n    ...resourceConfig.parameters,\n    ...operation.parameters,\n  ];\n  const requestSchema = operation.request_schema;\n  const isEmptyResponse = !properties || (requestSchema != null && requestSchema.type === 'undefined');\n  const headers = isEmptyResponse ? {} : { 'Content-Type': 'application/json' };\n  const body = isEmptyResponse ? undefined\n    : JSON.stringify(!isMappedAdapter ? properties : exportRecord(request.record, mappingFields));\n  const queryComponents = [];\n  let url = `${resourceConfig.base_url}${operation.relative_path || ''}`;\n  requestParameters.forEach((parameter) => {\n    let value = parameters[parameter.id];\n    if (parameter.is_static || typeof value === 'undefined') {\n      value = parameter.default;\n    }\n    if (value == null) {\n    // No value for this parameter\n      if (parameter.is_optional) {\n        return;\n      }\n      throw new Error(`Missing required parameter ${JSON.stringify(parameter.title)}`);\n    }\n    // Map the parameter to headers/URL/query\n    const { placement } = parameter;\n    const placementKey = parameter.placement_key;\n    if (placement === 'header') {\n      // Add to headers\n      headers[placementKey] = value;\n    } else if (placement === 'query') {\n      // Add to the URL as a query parameter\n      queryComponents.push(`${encodeURIComponent(placementKey)}=${encodeURIComponent(String(value))}`);\n    } else if (placement === 'path') {\n      // Replace the placeholder in the URL with escaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), encodeURIComponent(String(value)));\n    } else if (placement === 'url') {\n      // Replace the placeholder in the URL with unescaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), String(value));\n    }\n  });\n  // Add any query parameters to the URL\n  if (queryComponents.length) {\n    const newQuery = queryComponents.join('&');\n    url = url.replace(/(?:\\?(.*))?$/, (_, query) => (query ? `?${query}&${newQuery}` : `?${newQuery}`));\n  }\n  // Perform the request\n  const response = await fetch(url, { method: 'POST', headers, body });\n  if (!response.ok) {\n    throw response;\n  }\n  let result;\n  try {\n    result = await response.json();\n  } catch (e) {\n    result = null;\n  }\n  const resultPath = operation.response_key_path ? operation.response_key_path.split('.') : [];\n  while (result != null && resultPath.length) {\n    result = result[resultPath.shift()];\n  }\n  return result;\n}\n\ntry {\n  const response = await makeRequest();\n  return [0, { response: !isMappedAdapter ? response : importRecord(response, mappingFields) }];\n} catch (error) {\n  // eslint-disable-next-line no-console\n  // console.warn(error);\n  if (error.type === 'firestore') {\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.code,\n        message: `${error.status}: ${error.message}`,\n      },\n    }];\n  }\n\n  let errorStr = String(error);\n\n  if (errorStr.startsWith('Error: Couldn\\'t find data resource')) {\n    return [1, {\n      error: {\n        code: 'resourceNotFound',\n        status: 404,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n\n  if (errorStr === 'TypeError: Failed to fetch') {\n    errorStr += '. Does the server allow CORS?';\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.status,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  } if (!error.json) {\n    return [1, {\n      error: {\n        code: 'unknown',\n        status: -1,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  let rawError;\n  try {\n    const body = await error.json();\n    rawError = body;\n    errorStr = `JSON error response from server: ${JSON.stringify(body)}.`;\n  } catch {\n    errorStr = 'Non-JSON error body.';\n    rawError = { message: errorStr };\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    return [1, {\n      error: {\n        code: 'serverError',\n        status: error.status,\n        message: errorStr,\n        rawError,\n      },\n    }];\n  }\n}","name":"Create record","type":"function2","noerr":0,"wires":[["10544d20.64c85"],["ca3c4967.8fc25"]],"outputs":2,"function_inputs":{"key":{"request":{"key":"request","source":"input"},"contextId":{"key":"contextId","source":"msg"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{"response":{"name":"response","type":"dataResourceCreateResponse","title":"Response","description":"Response returned by the data resource after the record is successfully created."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while creating the record."}},"additionalProperties":false}]},{"x":420,"y":50,"z":"own_100f5064.6f140","id":"1fe9fc4d.4458c","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"records":{"key":"records@@@f0bf1a1a.10aa3","source":"node"},"totalCount":{"key":"totalCount@@@f0bf1a1a.10aa3","source":"node"}},"source":"object"}},{"x":420,"y":50,"z":"own_91f3e62e.3f65c","id":"2efe9993.2abdf","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{},"source":"object"}},{"x":210,"y":40,"z":"own_21057d66.1a85e","id":"441d4b92.6ac8d","func":"const { request, contextId, supersonic } = inputs;\nconst {\n  resourceName,\n  id,\n  properties = {},\n  parameters = {},\n} = request;\n\nconst { getComponentContextProp } = supersonic.context;\nconst { getResourceConfig } = supersonic.api.data;\nconst { prepareExecutable } = supersonic.api.formulas || {};\n\nconst get = (p, o) => {\n  const isNumber = (v) => typeof v === 'number';\n  const isBoolean = (v) => typeof v === 'boolean';\n  const isNull = (v) => v === null;\n  const isString = (v) => typeof v === 'string';\n  return p.reduce((xs, x) => (\n    xs && (xs[x] || isNumber(xs[x]) || isBoolean(xs[x]) || isNull(xs[x]) || isString(xs[x])) ? xs[x] : undefined\n  ), o);\n};\n\nconst importRecord = (record, mappingFields = []) => {\n  const importedData = {};\n  mappingFields.forEach((field) => {\n    if (field && field.mappingExpression && prepareExecutable) {\n      try {\n        const expression = prepareExecutable(JSON.parse(field.mappingExpression));\n        importedData[field.propertyName] = expression.execute({ source: { record } });\n      } catch (error) {\n        throw new Error('An error occured while executing mapping formula.');\n      }\n    } else if (field && field.mapping && Array.isArray(field.mapping)) {\n      const value = get(field.mapping, record);\n      if (value !== undefined) {\n        importedData[field.propertyName] = value;\n      }\n    }\n  });\n  return importedData;\n};\n\nconst setNestedProp = (obj = {}, [first, ...rest], value) => ({\n  ...obj,\n  [first]: rest.length\n    ? setNestedProp(obj[first], rest, value)\n    : value,\n});\n\nconst exportRecord = (record, mappingFields = []) => {\n  let exportedRecord = {};\n  mappingFields.forEach((field) => {\n    if (field && field.mapping && Array.isArray(field.mapping)) {\n      exportedRecord = setNestedProp(exportedRecord, field.mapping, get([field.propertyName], record));\n    }\n  });\n  return exportedRecord;\n};\n\nconst exportResourceConfig = (resourceConfig, mappingFields) => {\n  const exportedResourceConfig = { ...resourceConfig };\n  if (resourceConfig.record) {\n    exportedResourceConfig.record = exportRecord(resourceConfig.record, mappingFields);\n  }\n  return exportedResourceConfig;\n};\n\nconst adapterPrefix = 'adapter';\nconst [prefix, boundResource] = (resourceName || '').split(':');\nconst isAdapter = prefix === adapterPrefix;\n\nconst getActualResourceName = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return (\n      get(['mapping', 'value'], adapterProp) || get(['value'], adapterProp) || resourceName\n    );\n  }\n  return resourceName;\n};\n\nconst getMapping = () => (\n  isAdapter\n    ? get(['mapping', 'fields'], getComponentContextProp(contextId.rootContextId, boundResource, contextId, true))\n    : null\n);\n\nconst getAdapterFields = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return ['identifier', 'authConfig'].reduce((adapterFields, field) => {\n      const value = get(['mapping', field], adapterProp) || get([field], adapterProp);\n      return value ? { ...adapterFields, [field]: value } : adapterFields;\n    }, {});\n  }\n  return {};\n};\n\n// TODO: should be handled in odata driver in a future version of\n// api-configurator using string schema format field set to \"uuid\"\nconst uuidMatcher = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nconst fixIdentifierValue = (value) => (value && typeof value === 'string' && !uuidMatcher.test(value) ? `'${value}'` : value);\nconst prepareQuery = (query, resourceType) => {\n  if (resourceType === 'odata' && query.identifier && Object.keys(query.identifier).length > 1) {\n    return { ...query, identifier: Object.keys(query.identifier).reduce((acc, key) => ({ ...acc, [key]: fixIdentifierValue(query.identifier[key]) }), {}) };\n  }\n  return query;\n};\n\nconst mappingFields = getMapping(resourceName);\nconst isMappedAdapter = isAdapter && !!mappingFields;\n\nasync function makeRequest() {\n  const resourceConfig = getResourceConfig(getActualResourceName(resourceName));\n  const { driverConfiguration = {} } = resourceConfig;\n  const resourceType = resourceConfig.type || driverConfiguration.type;\n\n  if (!resourceConfig) {\n    throw new Error(`Couldn't find data resource with given name: ${resourceName}.`);\n  }\n\n  if (resourceType === 'agdb') {\n    const data = await supersonic.resource.update(resourceConfig.agdb_id, { object: properties }, id);\n    return data && data.value && data.value.object;\n  }\n  // Update a local data resource\n  if (resourceType === 'local') {\n    if (id == null) {\n      throw new Error(`Missing ${resourceName} record ID`);\n    }\n    // Omit the 'id' from the properties in case it has it\n    const updatedProperties = { ...properties };\n    delete updatedProperties.id;\n    const { appId } = await supersonic.api.app.getAppId();\n    const key = `local-resource:${appId}:${resourceName}:${id}`;\n    const { data: record } = await supersonic.api.asyncStorage.getItem({ key });\n    if (record == null || typeof record !== 'object' || typeof record.id === 'undefined') {\n      throw new Error(`Record ${resourceName} with ID ${id} does not exist`);\n    }\n    const updatedRecord = { ...record, ...updatedProperties };\n    await supersonic.api.asyncStorage.setItem({ key, data: updatedRecord });\n    return updatedRecord;\n  }\n  if (supersonic.api.data.drivers && resourceType in supersonic.api.data.drivers) {\n    const driver = supersonic.api.data.drivers[resourceType];\n    if (!driver.execute) {\n      throw new Error(`Invalid or missing driver for Resource ${resourceName}`);\n    }\n    let { authConfig } = request;\n    if (resourceType === 'firestore') {\n      try {\n        const { firebase } = supersonic.api;\n        const currentUser = await new Promise((resolve, reject) => {\n          const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n            unsubscribe();\n            resolve(user);\n          }, reject);\n        });\n        const token = await currentUser.getIdToken();\n        authConfig = {\n          type: 'bearer',\n          authToken: token,\n        };\n      } catch (err) {\n        /* ignore error and attempt query anyway */\n      }\n    }\n    let agQuery = prepareQuery({\n      resource: resourceConfig,\n      operation: 'update',\n      authConfig,\n      ...request,\n      ...getAdapterFields(),\n    }, resourceType);\n    if (isMappedAdapter) {\n      agQuery = exportResourceConfig(agQuery, mappingFields);\n    }\n    const response = await driver.execute(agQuery);\n    if (!response || response.message) {\n      if (resourceType === 'firestore') {\n        let code; let message; let status;\n        try {\n          ({ code, message, status } = response.driverRawError.response.data.error);\n        } catch (e) {\n          message = response.message;\n        }\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          type: 'firestore',\n          code,\n          message,\n          status,\n        };\n      }\n      throw new Error(response ? response.message : 'Request failed');\n    }\n    const record = response.record || response.data || null;\n    return record;\n  }\n  // Update a \"REST\" data resource\n  const operation = resourceConfig.operations.replace;\n  if (!operation) {\n    throw new Error(`Resource ${resourceName} does not support updating records`);\n  }\n  const requestParameters = [\n    ...resourceConfig.parameters,\n    ...operation.parameters,\n  ];\n  const requestSchema = operation.request_schema;\n  const isEmptyResponse = !properties || (requestSchema != null && requestSchema.type === 'undefined');\n  const headers = isEmptyResponse ? {} : { 'Content-Type': 'application/json' };\n  const body = isEmptyResponse ? undefined : JSON.stringify(properties);\n  const queryComponents = [];\n  let url = `${resourceConfig.base_url}${operation.relative_path || ''}`;\n  requestParameters.forEach((parameter) => {\n    let value = !isAdapter ? parameters[parameter.id]\n      : get(['identifier', parameter.placement_key], request);\n    if (parameter.is_static || typeof value === 'undefined') {\n      value = parameter.default;\n    }\n    if (value == null) {\n    // No value for this parameter\n      if (parameter.is_optional) {\n        return;\n      }\n      throw new Error(`Missing required parameter ${JSON.stringify(parameter.title)}`);\n    }\n    // Map the parameter to headers/URL/query\n    const { placement } = parameter;\n    const placementKey = parameter.placement_key;\n    if (placement === 'header') {\n      // Add to headers\n      headers[placementKey] = value;\n    } else if (placement === 'query') {\n      // Add to the URL as a query parameter\n      queryComponents.push(`${encodeURIComponent(placementKey)}=${encodeURIComponent(String(value))}`);\n    } else if (placement === 'path') {\n      // Replace the placeholder in the URL with escaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), encodeURIComponent(String(value)));\n    } else if (placement === 'url') {\n      // Replace the placeholder in the URL with unescaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), String(value));\n    }\n  });\n  // Add any query parameters to the URL\n  if (queryComponents.length) {\n    const newQuery = queryComponents.join('&');\n    url = url.replace(/(?:\\?(.*))?$/, (_, query) => (query ? `?${query}&${newQuery}` : `?${newQuery}`));\n  }\n  // Perform the request\n  const method = operation.method || 'PUT';\n  const response = await fetch(url, { method, headers, body });\n  if (!response.ok) {\n    throw response;\n  }\n  let result = await response.json();\n  const resultPath = operation.response_key_path ? operation.response_key_path.split('.') : [];\n  while (result != null && resultPath.length) {\n    result = result[resultPath.shift()];\n  }\n  return result;\n}\n\ntry {\n  const response = await makeRequest();\n  return [0, { response: !isMappedAdapter ? response : importRecord(response, mappingFields) }];\n} catch (error) {\n  // eslint-disable-next-line no-console\n  // console.warn(error);\n  if (error.type === 'firestore') {\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.code,\n        message: `${error.status}: ${error.message}`,\n      },\n    }];\n  }\n\n  let errorStr = String(error);\n\n  if (errorStr.startsWith('Error: Couldn\\'t find data resource')) {\n    return [1, {\n      error: {\n        code: 'resourceNotFound',\n        status: 404,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n\n  if (errorStr === 'TypeError: Failed to fetch') {\n    errorStr += '. Does the server allow CORS?';\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.status,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  } if (!error.json) {\n    return [1, {\n      error: {\n        code: 'unknown',\n        status: -1,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  let rawError;\n  try {\n    const body = await error.json();\n    rawError = body;\n    errorStr = `JSON error response from server: ${JSON.stringify(body)}.`;\n  } catch {\n    errorStr = 'Non-JSON error body.';\n    rawError = { message: errorStr };\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    return [1, {\n      error: {\n        code: 'serverError',\n        status: error.status,\n        message: errorStr,\n        rawError,\n      },\n    }];\n  }\n}","name":"Update record","type":"function2","noerr":0,"wires":[["58e438b4.7c48c"],["1b4bfc12.808a7"]],"outputs":2,"function_inputs":{"key":{"request":{"key":"request","source":"input"},"contextId":{"key":"contextId","source":"msg"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{"response":{"name":"response","type":"dataResourceUpdateResponse","title":"Response","description":"Response returned by the data resource after the record is successfully updated."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while updating the record."}},"additionalProperties":false}]},{"x":420,"y":50,"z":"own_21057d66.1a85e","id":"58e438b4.7c48c","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"response":{"key":"response@@@441d4b92.6ac8d","source":"node"}},"source":"object"}},{"x":210,"y":40,"z":"own_8fe6bea6.1072","id":"6afc87de.47ec9","func":"const { request, contextId, supersonic } = inputs;\nconst {\n  resourceName,\n  properties,\n  id,\n  parameters = {},\n} = request;\nconst { getComponentContextProp } = supersonic.context;\nconst { getResourceConfig } = supersonic.api.data;\n\nconst get = (p, o) => {\n  const isNumber = (v) => typeof v === 'number';\n  const isBoolean = (v) => typeof v === 'boolean';\n  const isNull = (v) => v === null;\n  const isString = (v) => typeof v === 'string';\n  return p.reduce((xs, x) => (\n    xs && (xs[x] || isNumber(xs[x]) || isBoolean(xs[x]) || isNull(xs[x]) || isString(xs[x])) ? xs[x] : undefined\n  ), o);\n};\n\nconst adapterPrefix = 'adapter';\nconst [prefix, boundResource] = (resourceName || '').split(':');\nconst isAdapter = prefix === adapterPrefix;\n\nconst getActualResourceName = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return (\n      get(['mapping', 'value'], adapterProp) || get(['value'], adapterProp) || resourceName\n    );\n  }\n  return resourceName;\n};\n\nconst getAdapterFields = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return ['identifier', 'authConfig'].reduce((adapterFields, field) => {\n      const value = get(['mapping', field], adapterProp) || get([field], adapterProp);\n      return value ? { ...adapterFields, [field]: value } : adapterFields;\n    }, {});\n  }\n  return {};\n};\n\n// TODO: should be handled in odata driver in a future version of\n// api-configurator using string schema format field set to \"uuid\"\nconst uuidMatcher = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;\nconst fixIdentifierValue = (value) => (value && typeof value === 'string' && !uuidMatcher.test(value) ? `'${value}'` : value);\nconst prepareQuery = (query, resourceType) => {\n  if (resourceType === 'odata' && query.identifier && Object.keys(query.identifier).length > 1) {\n    return { ...query, identifier: Object.keys(query.identifier).reduce((acc, key) => ({ ...acc, [key]: fixIdentifierValue(query.identifier[key]) }), {}) };\n  }\n  return query;\n};\n\nasync function makeRequest() {\n  const resourceConfig = getResourceConfig(getActualResourceName(resourceName));\n  const { driverConfiguration = {} } = resourceConfig;\n  const resourceType = resourceConfig.type || driverConfiguration.type;\n\n  if (!resourceConfig) {\n    throw new Error(`Couldn't find data resource with given name: ${resourceName}.`);\n  }\n\n  // Delete a local data resource\n  if (resourceType === 'local') {\n    if (id == null) {\n      throw new Error(`Missing ${resourceName} record ID`);\n    }\n    const { appId } = await supersonic.api.app.getAppId();\n    const key = `local-resource:${appId}:${resourceName}:${id}`;\n    await supersonic.api.asyncStorage.removeItem({ key });\n    return {};\n  }\n  if (resourceType === 'agdb') {\n    const data = await supersonic.resource.remove(resourceConfig.agdb_id, id);\n    return data && data.value && data.value.object;\n  }\n  if (supersonic.api.data.drivers && resourceType in supersonic.api.data.drivers) {\n    const driver = supersonic.api.data.drivers[resourceType];\n    if (!driver.execute) {\n      throw new Error(`Invalid or missing driver for Resource ${resourceName}`);\n    }\n    let { authConfig } = request;\n    if (resourceType === 'firestore') {\n      try {\n        const { firebase } = supersonic.api;\n        const currentUser = await new Promise((resolve, reject) => {\n          const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n            unsubscribe();\n            resolve(user);\n          }, reject);\n        });\n        const token = await currentUser.getIdToken();\n        authConfig = {\n          type: 'bearer',\n          authToken: token,\n        };\n      } catch (err) {\n        /* ignore error and attempt query anyway */\n      }\n    }\n    const agQuery = prepareQuery({\n      resource: resourceConfig,\n      operation: 'delete',\n      authConfig,\n      ...request,\n      ...getAdapterFields(),\n    }, resourceType);\n    const response = await driver.execute(agQuery);\n    if (!response || response.message) {\n      if (resourceType === 'firestore') {\n        let code; let message; let status;\n        try {\n          ({ code, message, status } = response.driverRawError.response.data.error);\n        } catch (e) {\n          message = response.message;\n        }\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          type: 'firestore',\n          code,\n          message,\n          status,\n        };\n      }\n      throw new Error(response ? response.message : 'Request failed');\n    }\n    const record = response.record || response.data || null;\n    return record;\n  }\n  // Delete a \"REST\" data resource\n  const operation = resourceConfig.operations.delete;\n  if (!operation) {\n    throw new Error(`Resource ${resourceName} does not support deleting records`);\n  }\n  const requestParameters = [\n    ...resourceConfig.parameters,\n    ...operation.parameters,\n  ];\n  const requestSchema = operation.request_schema;\n  const isEmptyResponse = !properties || (requestSchema != null && requestSchema.type === 'undefined');\n  const headers = isEmptyResponse ? {} : { 'Content-Type': 'application/json' };\n  const body = isEmptyResponse ? undefined : JSON.stringify(properties);\n  const queryComponents = [];\n  let url = `${resourceConfig.base_url}${operation.relative_path || ''}`;\n  requestParameters.forEach((parameter) => {\n    let value = !isAdapter ? parameters[parameter.id]\n      : get(['identifier', parameter.placement_key], request);\n    if (parameter.is_static || typeof value === 'undefined') {\n      value = parameter.default;\n    }\n    if (value == null) {\n      // No value for this parameter\n      if (parameter.is_optional) {\n        return;\n      }\n      throw new Error(`Missing required parameter ${JSON.stringify(parameter.title)}`);\n    }\n    // Map the parameter to headers/URL/query\n    const { placement } = parameter;\n    const placementKey = parameter.placement_key;\n    if (placement === 'header') {\n      // Add to headers\n      headers[placementKey] = value;\n    } else if (placement === 'query') {\n      // Add to the URL as a query parameter\n      queryComponents.push(`${encodeURIComponent(placementKey)}=${encodeURIComponent(String(value))}`);\n    } else if (placement === 'path') {\n      // Replace the placeholder in the URL with escaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), encodeURIComponent(String(value)));\n    } else if (placement === 'url') {\n      // Replace the placeholder in the URL with unescaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), String(value));\n    }\n  });\n  // Add any query parameters to the URL\n  if (queryComponents.length) {\n    const newQuery = queryComponents.join('&');\n    url = url.replace(/(?:\\?(.*))?$/, (_, query) => (query ? `?${query}&${newQuery}` : `?${newQuery}`));\n  }\n  // Perform the request\n  const response = await fetch(url, { method: 'DELETE', headers, body });\n  if (!response.ok) {\n    throw response;\n  }\n  let result;\n  try {\n    result = await response.json();\n  } catch (error) {\n    result = {};\n  }\n  const resultPath = operation.response_key_path ? operation.response_key_path.split('.') : [];\n  while (result != null && resultPath.length) {\n    result = result[resultPath.shift()];\n  }\n  return result;\n}\n\ntry {\n  const response = await makeRequest();\n  return [0, { response }];\n} catch (error) {\n  // eslint-disable-next-line no-console\n  // console.warn(error);\n  if (error.type === 'firestore') {\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.code,\n        message: `${error.status}: ${error.message}`,\n      },\n    }];\n  }\n\n  let errorStr = String(error);\n\n  if (errorStr.startsWith('Error: Couldn\\'t find data resource')) {\n    return [1, {\n      error: {\n        code: 'resourceNotFound',\n        status: 404,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n\n  if (errorStr === 'TypeError: Failed to fetch') {\n    errorStr += '. Does the server allow CORS?';\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.status,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  } if (!error.json) {\n    return [1, {\n      error: {\n        code: 'unknown',\n        status: -1,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  let rawError;\n  try {\n    const body = await error.json();\n    rawError = body;\n    errorStr = `JSON error response from server: ${JSON.stringify(body)}.`;\n  } catch {\n    errorStr = 'Non-JSON error body.';\n    rawError = { message: errorStr };\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    return [1, {\n      error: {\n        code: 'serverError',\n        status: error.status,\n        message: errorStr,\n        rawError,\n      },\n    }];\n  }\n}","name":"Delete record","type":"function2","noerr":0,"wires":[["1333ac45.8009c"],["6b1b3c9b.2009a"]],"outputs":2,"function_inputs":{"key":{"request":{"key":"request","source":"input"},"contextId":{"key":"contextId","source":"msg"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{"response":{"name":"response","type":"dataResourceDeleteResponse","title":"Response","description":"Response returned by the data resource after the record is successfully deleted."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while deleting the record."}},"additionalProperties":false}]},{"x":420,"y":100,"z":"own_8fe6bea6.1072","id":"6b1b3c9b.2009a","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"error":{"key":"error@@@6afc87de.47ec9","source":"node"}},"source":"object"}},{"x":420,"y":100,"z":"own_d51109f.3b25d","id":"731bd1e9.4983c","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"error":{"key":"error@@@19b93bf3.89208","source":"node"}},"source":"object"}},{"x":420,"y":50,"z":"own_d51109f.3b25d","id":"c55913f3.8d802","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"record":{"key":"record@@@19b93bf3.89208","source":"node"}},"source":"object"}},{"x":420,"y":100,"z":"own_1d6d336a.9126c","id":"ca3c4967.8fc25","name":"","type":"set-subflow-output","wires":[[]],"subflow_output":{"key":{"error":{"key":"error@@@1ed52ea2.56495","source":"node"}},"source":"object"}},{"x":210,"y":40,"z":"own_105ec0bb.2f7d7","id":"dd5da27b.11c99","func":"const { assignment, supersonic, contextId } = inputs;\nconst { reference, data } = assignment || {};\nawait supersonic.context.setDataReference(reference, data, true, contextId);","name":"Set data variable","type":"function2","noerr":0,"wires":[["15f7596e.557a0"]],"outputs":1,"function_inputs":{"key":{"contextId":{"key":"contextId","source":"msg"},"assignment":{"key":"assignment","source":"input"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{},"additionalProperties":false}]},{"x":210,"y":40,"z":"own_100f5064.6f140","id":"f0bf1a1a.10aa3","func":"const { request, contextId, supersonic } = inputs;\nconst { resourceName, parameters = {} } = request;\n\nconst { getComponentContextProp } = supersonic.context;\nconst { getResourceConfig } = supersonic.api.data;\nconst { prepareExecutable } = supersonic.api.formulas || {};\n\nconst get = (p, o) => {\n  const isNumber = (v) => typeof v === 'number';\n  const isBoolean = (v) => typeof v === 'boolean';\n  const isNull = (v) => v === null;\n  const isString = (v) => typeof v === 'string';\n  return p.reduce((xs, x) => (\n    xs && (xs[x] || isNumber(xs[x]) || isBoolean(xs[x]) || isNull(xs[x]) || isString(xs[x])) ? xs[x] : undefined\n  ), o);\n};\n\nconst importRecord = (record, mappingFields = []) => {\n  const importedData = {};\n  mappingFields.forEach((field) => {\n    if (field && field.mappingExpression && prepareExecutable) {\n      try {\n        const expression = prepareExecutable(JSON.parse(field.mappingExpression));\n        importedData[field.propertyName] = expression.execute({ source: { record } });\n      } catch (error) {\n        throw new Error('An error occured while executing mapping formula');\n      }\n    } else if (field && field.mapping && Array.isArray(field.mapping)) {\n      const value = get(field.mapping, record);\n      if (value !== undefined) {\n        importedData[field.propertyName] = value;\n      }\n    }\n  });\n  return importedData;\n};\nconst adapterPrefix = 'adapter';\nconst [prefix, boundResource] = (resourceName || '').split(':');\nconst isAdapter = prefix === adapterPrefix;\n\nconst getActualResourceName = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return (\n      get(['mapping', 'value'], adapterProp) || get(['value'], adapterProp) || resourceName\n    );\n  }\n  return resourceName;\n};\n\nconst getMapping = () => (\n  isAdapter\n    ? get(['mapping', 'fields'], getComponentContextProp(contextId.rootContextId, boundResource, contextId, true))\n    : null\n);\n\nconst getAdapterFields = () => {\n  if (isAdapter) {\n    const adapterProp = getComponentContextProp(contextId.rootContextId, boundResource, contextId, true);\n    return ['conditions', 'authConfig'].reduce((adapterFields, field) => {\n      const value = get(['mapping', field], adapterProp) || get([field], adapterProp);\n      return value ? { ...adapterFields, [field === 'conditions' ? 'condition' : field]: value } : adapterFields;\n    }, {});\n  }\n  return {};\n};\n\nconst mappingFields = getMapping(resourceName);\nconst isMappedAdapter = isAdapter && !!mappingFields;\n\nasync function makeRequest() {\n  const resourceConfig = getResourceConfig(getActualResourceName(resourceName));\n  const { driverConfiguration = {} } = resourceConfig;\n  const resourceType = resourceConfig.type || driverConfiguration.type;\n\n  if (!resourceConfig) {\n    throw new Error(`Couldn't find data resource with given name: ${resourceName}.`);\n  }\n\n  if (resourceType === 'agdb') {\n    // This is assumed to be a legacy data resource\n    const query = parameters.query || {};\n    // AGDB -related parameters are added to the query in a special way\n    const { sort } = parameters;\n    const { filters } = parameters;\n    const { limit } = parameters;\n    const { skip } = parameters;\n\n    if (sort != null) {\n      query.sort = JSON.stringify(sort);\n    }\n    if (filters != null) {\n      query.query = JSON.stringify(filters);\n    }\n    if (limit != null) {\n      query.limit = limit;\n    }\n    if (skip != null) {\n      query.skip = skip;\n    }\n\n    const backendResourceName = (resourceConfig && resourceConfig.agdb_id) || resourceName;\n    const data = await supersonic.resource.findAll(backendResourceName, query);\n    return { records: (data && data.value && data.value.objects) || [] };\n  }\n  // Load a local data resource\n  if (resourceType === 'local') {\n    const { appId } = await supersonic.api.app.getAppId();\n    const keyPrefix = `local-resource:${appId}:${resourceName}:`;\n    const { data: allKeys } = await supersonic.api.asyncStorage.getAllKeys();\n    const keys = allKeys.filter((key) => key.startsWith(keyPrefix));\n    const { data: results } = await supersonic.api.asyncStorage.multiGet({ data: keys });\n    const records = (results || [])\n      .map(([, record]) => {\n        if (typeof record === 'string') {\n          try {\n            return JSON.parse(record);\n          } catch (error) {\n            return null;\n          }\n        }\n        return record;\n      })\n      .filter((record) => record != null && typeof record === 'object' && typeof record.id !== 'undefined');\n    return { records };\n  }\n  if (supersonic.api.data.drivers && resourceType in supersonic.api.data.drivers) {\n    const driver = supersonic.api.data.drivers[resourceType];\n    if (!driver.execute) {\n      throw new Error(`Invalid or missing driver for Resource ${resourceName}`);\n    }\n    let { authConfig } = request;\n    if (resourceType === 'firestore') {\n      try {\n        const { firebase } = supersonic.api;\n        const currentUser = await new Promise((resolve, reject) => {\n          const unsubscribe = firebase.auth().onAuthStateChanged((user) => {\n            unsubscribe();\n            resolve(user);\n          }, reject);\n        });\n        const token = await currentUser.getIdToken();\n        authConfig = {\n          type: 'bearer',\n          authToken: token,\n        };\n      } catch (err) {\n        /* ignore error and attempt query anyway */\n      }\n    }\n    const agQuery = {\n      ...request,\n      resource: resourceConfig,\n      operation: 'list',\n      authConfig,\n      count: request.pagination && request.pagination.includeTotalCount,\n      ...getAdapterFields(),\n    };\n    const response = await driver.execute(agQuery);\n\n    if (!response || response.message) {\n      if (resourceType === 'firestore') {\n        let code; let message; let status;\n        try {\n          ({ code, message, status } = response.driverRawError.response.data[0].error);\n        } catch (e) {\n          message = response.message;\n        }\n        // eslint-disable-next-line no-throw-literal\n        throw {\n          type: 'firestore',\n          code,\n          message,\n          status,\n        };\n      }\n      throw new Error(response ? response.message : 'Request failed');\n    }\n\n    if (!response || response.message) {\n      throw new Error(response ? response.message : 'Request failed');\n    }\n    const records = response.records || response.data || [];\n    return { records, totalCount: response.totalCount };\n  }\n  // Load a \"REST\" data resource\n  const operation = resourceConfig.operations.list;\n  if (!operation) {\n    throw new Error(`Resource ${resourceName} does not support getting record collections`);\n  }\n  const requestParameters = [\n    ...resourceConfig.parameters,\n    ...operation.parameters,\n  ];\n  const headers = {};\n  const queryComponents = [];\n  let url = `${resourceConfig.base_url}${operation.relative_path || ''}`;\n  requestParameters.forEach((parameter) => {\n    let value = parameters[parameter.id];\n    if (parameter.is_static || typeof value === 'undefined') {\n      value = parameter.default;\n    }\n    if (value == null) {\n      // No value for this parameter\n      if (parameter.is_optional) {\n        return;\n      }\n      throw new Error(`Missing required parameter ${JSON.stringify(parameter.title)}`);\n    }\n    // Map the parameter to headers/URL/query\n    const { placement } = parameter;\n    const placementKey = parameter.placement_key;\n    if (placement === 'header') {\n      // Add to headers\n      headers[placementKey] = value;\n    } else if (placement === 'query') {\n      // Add to the URL as a query parameter\n      queryComponents.push(`${encodeURIComponent(placementKey)}=${encodeURIComponent(String(value))}`);\n    } else if (placement === 'path') {\n      // Replace the placeholder in the URL with escaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), encodeURIComponent(String(value)));\n    } else if (placement === 'url') {\n      // Replace the placeholder in the URL with unescaped string\n      url = url.replace(new RegExp(`{\\\\s*${placementKey}\\\\s*}`, 'g'), String(value));\n    }\n  });\n  // Add any query parameters to the URL\n  if (queryComponents.length) {\n    const newQuery = queryComponents.join('&');\n    url = url.replace(/(?:\\?(.*))?$/, (_, query) => (query ? `?${query}&${newQuery}` : `?${newQuery}`));\n  }\n  // Perform the request\n  const response = await fetch(url, { method: 'GET', headers });\n  if (!response.ok) {\n    throw response;\n  }\n  const responseJson = await response.json();\n  let results = responseJson;\n  const resultPath = operation.response_key_path ? operation.response_key_path.split('.') : [];\n  while (results != null && resultPath.length) {\n    results = results[resultPath.shift()];\n  }\n  if (!Array.isArray(results)) {\n    throw new Error(`\nThe result was not an array. Maybe the data you're looking for is inside one of the response object keys?\n\n${JSON.stringify(responseJson, null, 2)}\n`);\n  }\n  return { records: results };\n}\n\ntry {\n  const { records, totalCount } = await makeRequest();\n  return [0, {\n    records: !isMappedAdapter ? records : records.map((record) => importRecord(record, mappingFields)),\n    totalCount,\n  }];\n} catch (error) {\n  // eslint-disable-next-line no-console\n  // console.warn(error);\n  if (error.type === 'firestore') {\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.code,\n        message: `${error.status}: ${error.message}`,\n      },\n    }];\n  }\n\n  let errorStr = String(error);\n\n  if (errorStr.startsWith('Error: Couldn\\'t find data resource')) {\n    return [1, {\n      error: {\n        code: 'resourceNotFound',\n        status: 404,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  if (errorStr === 'TypeError: Failed to fetch') {\n    errorStr += '. Does the server allow CORS?';\n    return [1, {\n      error: {\n        code: 'requestFailed',\n        status: error.status,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  } if (!error.json) {\n    return [1, {\n      error: {\n        code: 'unknown',\n        status: -1,\n        message: errorStr,\n        rawError: error,\n      },\n    }];\n  }\n  let rawError;\n  try {\n    const body = await error.json();\n    rawError = body;\n    errorStr = `JSON error response from server: ${JSON.stringify(body)}.`;\n  } catch {\n    errorStr = 'Non-JSON error body.';\n    rawError = { message: errorStr };\n  } finally {\n    // eslint-disable-next-line no-unsafe-finally\n    return [1, {\n      error: {\n        code: 'serverError',\n        status: error.status,\n        message: errorStr,\n        rawError,\n      },\n    }];\n  }\n}","name":"Get record collection","type":"function2","noerr":0,"wires":[["1fe9fc4d.4458c"],["1c88f5a9.1d6dc"]],"outputs":2,"function_inputs":{"key":{"request":{"key":"request","source":"input"},"contextId":{"key":"contextId","source":"msg"},"supersonic":{"key":"supersonic","source":"msg"}},"source":"object"},"function_outputs":[{"type":"object","properties":{"records":{"name":"records","type":"dataResourceListResponse","title":"Collection of records","description":"The successfully retrieved collection of records."},"totalCount":{"name":"totalCount","type":"number","title":"Total count","description":"Total count of records in the collection. Available only with driver-based resources that support total count."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while fetching the collection of records."}},"additionalProperties":false}]},{"id":"own_8fe6bea6.1072","in":[{"x":40,"y":40,"wires":[{"id":"6afc87de.47ec9"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"1333ac45.8009c","port":0}]},{"x":490,"y":100,"wires":[{"id":"6b1b3c9b.2009a","port":0}]}],"name":"Delete record","type":"subflow","arguments":[{"name":"request","type":"dataResourceDeleteRequest","title":"Delete data record request","minLength":1,"description":"Configuration required by the data resource to delete a single data record."}],"outputSchemas":[{"type":"object","properties":{"response":{"name":"response","type":"dataResourceDeleteResponse","title":"Response","description":"Response returned by the data resource after the record is successfully deleted."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while deleting the record."}},"additionalProperties":false}],"outputArguments":[]},{"id":"own_d51109f.3b25d","in":[{"x":40,"y":40,"wires":[{"id":"19b93bf3.89208"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"c55913f3.8d802","port":0}]},{"x":490,"y":100,"wires":[{"id":"731bd1e9.4983c","port":0}]}],"name":"Get record","type":"subflow","arguments":[{"name":"request","type":"dataResourceRetrieveRequest","title":"Get data record request","minLength":1,"description":"Configuration required by the selected data resource to get a single data record."}],"outputSchemas":[{"type":"object","properties":{"record":{"name":"record","type":"dataResourceRetrieveResponse","title":"Record","description":"The successfully retrieved record."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown","responseMustBeObject"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while fetching the record.\n- `responseMustBeObject`: Thrown if the server does not return an object as a response for a single data record request."}},"additionalProperties":false}],"outputArguments":[]},{"id":"own_100f5064.6f140","in":[{"x":40,"y":40,"wires":[{"id":"f0bf1a1a.10aa3"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"1fe9fc4d.4458c","port":0}]},{"x":490,"y":100,"wires":[{"id":"1c88f5a9.1d6dc","port":0}]}],"name":"Get record collection","type":"subflow","arguments":[{"name":"request","type":"dataResourceListRequest","title":"Get data record collection request","minLength":1,"description":"Configuration required by the selected data resource to get a collection of data records."}],"outputSchemas":[{"type":"object","properties":{"records":{"name":"records","type":"dataResourceListResponse","title":"Collection of records","description":"The successfully retrieved collection of records."},"totalCount":{"name":"totalCount","type":"number","title":"Total count","description":"Total count of records in the collection. Available only with driver-based resources that support total count."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while fetching the collection of records."}},"additionalProperties":false}],"outputArguments":[]},{"id":"own_105ec0bb.2f7d7","in":[{"x":40,"y":40,"wires":[{"id":"dd5da27b.11c99"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"15f7596e.557a0","port":0}]}],"name":"Set data variable","type":"subflow","arguments":[{"name":"assignment","type":"dataReferenceAssignment","title":"Data variable","minLength":1,"description":"Data variable to set"}],"outputSchemas":[{"type":"object","properties":{},"additionalProperties":false}],"outputArguments":[]},{"id":"own_1d6d336a.9126c","in":[{"x":40,"y":40,"wires":[{"id":"1ed52ea2.56495"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"10544d20.64c85","port":0}]},{"x":490,"y":100,"wires":[{"id":"ca3c4967.8fc25","port":0}]}],"name":"Create record","type":"subflow","arguments":[{"name":"request","type":"dataResourceCreateRequest","title":"Create data record request","minLength":1,"description":"Configuration required by the selected data resource to create a new data record."}],"outputSchemas":[{"type":"object","properties":{"response":{"name":"response","type":"dataResourceCreateResponse","title":"Response","description":"Response returned by the data resource after the record is successfully created."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while creating the record."}},"additionalProperties":false}],"outputArguments":[]},{"id":"own_21057d66.1a85e","in":[{"x":40,"y":40,"wires":[{"id":"441d4b92.6ac8d"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"58e438b4.7c48c","port":0}]},{"x":490,"y":100,"wires":[{"id":"1b4bfc12.808a7","port":0}]}],"name":"Update record","type":"subflow","arguments":[{"name":"request","type":"dataResourceUpdateRequest","title":"Update data record request","minLength":1,"description":"Configuration required by the selected data resource to update an existing data record."}],"outputSchemas":[{"type":"object","properties":{"response":{"name":"response","type":"dataResourceUpdateResponse","title":"Response","description":"Response returned by the data resource after the record is successfully updated."}},"additionalProperties":false},{"type":"object","properties":{"error":{"name":"error","type":"object","title":"Error","properties":{"code":{"enum":["requestFailed","serverError","resourceNotFound","unknown"],"type":"string"},"message":{"type":"string"},"rawError":{"type":"value"}},"description":"One of the following error codes:\n\n- `requestFailed`: Thrown if the entire request failed due to e.g. CORS issues or no network connectivity.\n- `serverError`: Thrown if the server returned an error response.\n- `resourceNotFound`: Thrown if the resouce you are trying to get was not found.\n- `unknown`: Thrown if an unknown error occurred while updating the record."}},"additionalProperties":false}],"outputArguments":[]},{"id":"own_91f3e62e.3f65c","in":[{"x":40,"y":40,"wires":[{"id":"1eb859fe.2c9fd"}]}],"out":[{"x":490,"y":40,"wires":[{"id":"2efe9993.2abdf","port":0}]}],"name":"Hide spinner","type":"subflow","arguments":[],"outputSchemas":[{"type":"object","properties":{},"additionalProperties":false}],"outputArguments":[]},{"id":"own_97b54227.3b127","in":[{"x":40,"y":40,"wires":[{"id":"147f90f1.617fe"}]}],"out":[{"x":380,"y":40,"wires":[{"id":"147f90f1.617fe","port":0}]}],"name":"Delay","type":"subflow","arguments":[{"name":"time","type":"number","title":"Time to wait","default":500,"minLength":1,"description":"Time to wait as an integer. Negative values result in 0 delay."},{"enum":["ms","s","min","h"],"name":"unit","type":"string","title":"Unit","default":"ms","minLength":1,"description":"Unit of time to wait: `ms` for millisecond, `s` for second, `min` for minute and `h` for hour."}],"outputArguments":[]},{"x":600,"y":30,"z":"data:listUserAll153582012","id":"b8ad022f.a76e9","type":"subflow:own_105ec0bb.2f7d7","wires":[],"subflow_input_arguments":{"assignment":{"key":{"data":"records@@@115903e2.476d2c","reference":"listUserAll1"},"source":{"data":"node","reference":"data-reference"}}},"fallbackName":"Set data variable"},{"x":350,"y":30,"z":"data:listUserAll153582012","id":"115903e2.476d2c","type":"subflow:own_100f5064.6f140","wires":[["b8ad022f.a76e9","be445ba7.5e7488"],["be445ba7.5e7488"]],"subflow_input_arguments":{"request":{"key":{"resourceName":"listUserAll"},"source":{"resourceName":"resource"}}},"fallbackName":"Get record collection"},{"x":100,"y":30,"z":"data:listUserAll153582012","id":"7c9332d1.1fc32c","type":"event","wires":[["115903e2.476d2c"]],"idType":"event","eventSource":"page:1:onPageDidMount","fallbackName":"Page mounted","isConfigurable":false},{"x":350,"y":110,"z":"data:listUserAll153582012","id":"be445ba7.5e7488","type":"subflow:own_97b54227.3b127","wires":[["115903e2.476d2c"]],"subflow_input_arguments":{"time":{"key":5000,"source":"num"},"unit":{"key":"ms","source":"str"}},"fallbackName":"Delay"},{"x":110,"y":40,"z":"page:1","id":"dfc195adc3d9e.969f74ad9cfb7","name":"","type":"event","wires":[["fbb06eb5ef36c.5a05fd56dc5ab"]],"idType":"event","eventSource":"page:1:onPageDidMount","fallbackName":"Page mounted","isConfigurable":true,"pageId":"page.Page1"},{"x":320,"y":40,"z":"page:1","id":"fbb06eb5ef36c.5a05fd56dc5ab","type":"subflow:own_91f3e62e.3f65c","wires":[[]],"pageId":"page.Page1","fallbackName":"Hide spinner"}],"components":{"1-bbf450d6-3e2c-4a35-b99a-bd6a98e6dd0f":{"id":"1-bbf450d6-3e2c-4a35-b99a-bd6a98e6dd0f","props":{"contextPropTypes":["visible","data","styles","animationsConfig","backgroundImage"],"visible":true,"backgroundImage":"","flowGroupId":"page:1:component:bbf450d6-3e2c-4a35-b99a-bd6a98e6dd0f","styles":{"holder":{"flex":1,"paddingTop":24,"paddingLeft":16,"paddingRight":16,"paddingBottom":64,"backgroundColor":"#f8f8f8","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0},"container":{"alignItems":"flex-start","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":[],"expressionProps":[],"events":{}},"reactClass":"Layout","pageId":"page.Page1"},"ab53c9c6-0662-4d7d-a941-53189ca583ca":{"id":"ab53c9c6-0662-4d7d-a941-53189ca583ca","props":{"contextPropTypes":["visible","data","styles","animationsConfig","backgroundImage"],"visible":true,"backgroundImage":"","flowGroupId":"page:1:component:ab53c9c6-0662-4d7d-a941-53189ca583ca","styles":{"holder":{"flexWrap":"nowrap","alignItems":"flex-start","backfaceVisibility":"visible","opacity":1,"overflow":"hidden","position":"relative","alignSelf":"stretch","alignContent":"flex-start","flexDirection":"column","justifyContent":"flex-start","flexGrow":0,"flexShrink":0,"flexBasis":"auto","marginTop":0,"marginBottom":0,"borderRadius":0.1,"borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0},"backgroundImage":{"resizeMode":"cover","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":[],"expressionProps":[],"events":{}},"reactClass":"FlexBoxLayout","pageId":"page.Page1"},"1b605459-303b-46fe-836e-b366f0afa751":{"id":"1b605459-303b-46fe-836e-b366f0afa751","props":{"contextPropTypes":["visible","data","styles","animationsConfig","horizontal"],"visible":true,"horizontal":false,"flowGroupId":"page:1:component:1b605459-303b-46fe-836e-b366f0afa751","styles":{"holder":{"opacity":1,"flexWrap":"nowrap","overflow":"scroll","position":"relative","alignSelf":"stretch","alignContent":"flex-start","flexDirection":"column","justifyContent":"flex-start","backfaceVisibility":"visible","flexGrow":0,"flexShrink":0,"flexBasis":"auto","marginTop":0,"marginBottom":0,"borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0},"container":{"alignItems":"flex-start","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":[],"expressionProps":[],"events":{}},"reactClass":"ScrollBox","pageId":"page.Page1"},"ec1c8d05-4e29-4484-aaea-95b870562cc0":{"isRepeat":true,"repeatAs":"current","isComposite":true,"id":"ec1c8d05-4e29-4484-aaea-95b870562cc0","props":{"contextPropTypes":["visible","data","styles","animationsConfig","label","description","source","backgroundImage"],"description":"Lorem ipsum dolor sit amet, consetetur sadipscing elitr.","source":"https://s3.amazonaws.com/appgyver.assets/composer3/images/list_image_placeholder.png","visible":true,"backgroundImage":"","bindings":[{"type":"repeat","sourceProp":"current.name","targetProp":"label","aliasKey":"current-ec1c8d05-4e29-4484-aaea-95b870562cc0"},{"type":"data","sourceId":"listUserAll1","sourceProp":"","targetProp":"data","aliasKey":"current-ec1c8d05-4e29-4484-aaea-95b870562cc0"}],"stylesBindings":[{"type":"expression","sourceId":"548745a3-a424-401f-a315-d283f97f086e","targetProp":"holder.marginBottom"}],"flowGroupId":"page:1:component:ec1c8d05-4e29-4484-aaea-95b870562cc0","styles":{"holder":{"flexWrap":"nowrap","overflow":"hidden","alignItems":"center","flexDirection":"row","backfaceVisibility":"visible","opacity":1,"position":"relative","alignSelf":"stretch","alignContent":"flex-start","justifyContent":"space-between","borderColor":"#a9adb9","shadowColor":"rgba(0,0,0,0.15)","borderRadius":4,"paddingRight":16,"shadowRadius":1,"borderTopWidth":0,"backgroundColor":"#ffffff","borderLeftWidth":0,"borderRightWidth":0,"borderBottomWidth":0,"shadowOffset":{"width":0,"height":1},"shadowOpacity":0,"borderTopLeftRadius":4,"borderTopRightRadius":4,"borderBottomLeftRadius":4,"borderBottomRightRadius":4,"flexGrow":0,"flexShrink":0,"flexBasis":"auto","marginTop":0,"borderWidth":0},"backgroundImage":{"resizeMode":"cover","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":["label","data"],"expressionProps":[],"events":{}},"reactClass":"FlexBoxLayout","pageId":"page.Page1","aliasKey":"current-ec1c8d05-4e29-4484-aaea-95b870562cc0"},"fd3afa37-c39c-4de6-ab65-5e260124733f":{"id":"fd3afa37-c39c-4de6-ab65-5e260124733f","props":{"contextPropTypes":["visible","data","styles","animationsConfig","src"],"stretchToTheHeight":true,"src":"https://s3.amazonaws.com/appgyver.assets/composer3/images/image_placeholder.png","visible":true,"bindings":[{"type":"internal-property","sourceId":"ec1c8d05-4e29-4484-aaea-95b870562cc0:source","sourceProp":"","targetProp":"src"}],"flowGroupId":"page:1:component:fd3afa37-c39c-4de6-ab65-5e260124733f","styles":{"con":{"width":"100%","backfaceVisibility":"visible","opacity":1,"overflow":"hidden","position":"relative","alignSelf":"stretch","borderColor":"#0010cf","shadowColor":"rgba(0,0,0,0.15)","borderRadius":0.1,"shadowRadius":1,"borderTopWidth":0,"borderLeftWidth":0,"borderRightWidth":0,"borderBottomWidth":0,"shadowOffset":{"width":0,"height":1},"shadowOpacity":0,"borderTopLeftRadius":0,"borderTopRightRadius":0,"borderBottomLeftRadius":0,"borderBottomRightRadius":0,"flexGrow":0,"maxWidth":88,"minWidth":48,"marginRight":12,"flexShrink":0,"flexBasis":"auto","marginLeft":0,"borderWidth":0},"image":{"width":"100%","resizeMode":"cover","height":"100%","position":"absolute","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":["src"],"expressionProps":[],"events":{}},"reactClass":"Picture","pageId":"page.Page1","rcid":"ec1c8d05-4e29-4484-aaea-95b870562cc0","rocid":"ec1c8d05-4e29-4484-aaea-95b870562cc0"},"d69a854c-a10a-471d-82b9-34a2c4f3c876":{"id":"d69a854c-a10a-471d-82b9-34a2c4f3c876","props":{"contextPropTypes":["visible","data","styles","animationsConfig","backgroundImage"],"visible":true,"backgroundImage":"","flowGroupId":"page:1:component:d69a854c-a10a-471d-82b9-34a2c4f3c876","styles":{"holder":{"flexWrap":"nowrap","alignItems":"flex-start","backfaceVisibility":"visible","opacity":1,"overflow":"hidden","position":"relative","alignSelf":"auto","alignContent":"flex-start","flexDirection":"column","justifyContent":"center","paddingTop":16,"paddingBottom":16,"flexGrow":1,"flexShrink":1,"flexBasis":"auto","marginLeft":0,"marginRight":0,"borderRadius":0.1,"borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0},"backgroundImage":{"resizeMode":"cover","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":[],"expressionProps":[],"events":{}},"reactClass":"FlexBoxLayout","pageId":"page.Page1","rcid":"ec1c8d05-4e29-4484-aaea-95b870562cc0","rocid":"ec1c8d05-4e29-4484-aaea-95b870562cc0"},"459e0db4-241b-40d1-b7f3-63d565a46474":{"id":"459e0db4-241b-40d1-b7f3-63d565a46474","props":{"contextPropTypes":["visible","data","styles","animationsConfig","content"],"content":"Headline","visible":true,"bindings":[{"type":"repeat","sourceProp":"current.name","targetProp":"content","aliasKey":"current-ec1c8d05-4e29-4484-aaea-95b870562cc0"}],"flowGroupId":"page:1:component:459e0db4-241b-40d1-b7f3-63d565a46474","styles":{"text":{"color":"#323339","fontSize":16,"fontFamily":"Poppins","fontWeight":"600","lineHeight":24,"textDecorationColor":"#323339","textDecorationStyle":"solid","fontStyle":"normal","textAlign":"left","letterSpacing":0,"textTransform":"none","textDecorationLine":"none","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0},"view":{"overflow":"visible","backfaceVisibility":"visible","opacity":1,"position":"relative","alignSelf":"stretch","flexGrow":0,"flexShrink":0,"flexBasis":"auto","marginTop":0,"borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":["content"],"expressionProps":[],"events":{}},"reactClass":"Text","pageId":"page.Page1","rcid":"ec1c8d05-4e29-4484-aaea-95b870562cc0","rocid":"ec1c8d05-4e29-4484-aaea-95b870562cc0"},"60b34f54-a87f-4d52-bb52-7f3f1c9603c0":{"id":"60b34f54-a87f-4d52-bb52-7f3f1c9603c0","props":{"contextPropTypes":["visible","data","styles","animationsConfig","content"],"content":"Lorem ipsum dolor sit amet","visible":true,"bindings":[{"type":"internal-property","sourceId":"ec1c8d05-4e29-4484-aaea-95b870562cc0:description","sourceProp":"","targetProp":"content"}],"flowGroupId":"page:1:component:60b34f54-a87f-4d52-bb52-7f3f1c9603c0","styles":{"text":{"color":"#323339","fontSize":14,"fontFamily":"Poppins","fontWeight":"400","lineHeight":20,"textDecorationColor":"#323339","textDecorationStyle":"solid","fontStyle":"normal","textAlign":"left","letterSpacing":0,"textTransform":"none","textDecorationLine":"none","borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0},"view":{"overflow":"visible","backfaceVisibility":"visible","opacity":1,"position":"relative","alignSelf":"stretch","borderTopEndRadius":0,"borderTopStartRadius":0,"flexGrow":0,"flexShrink":0,"flexBasis":"auto","marginTop":0,"marginBottom":0,"borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":["content"],"expressionProps":[],"events":{}},"reactClass":"Text","pageId":"page.Page1","rcid":"ec1c8d05-4e29-4484-aaea-95b870562cc0","rocid":"ec1c8d05-4e29-4484-aaea-95b870562cc0"},"2-edebab26-796f-4ea8-9903-3350542f889a":{"id":"2-edebab26-796f-4ea8-9903-3350542f889a","props":{"contextPropTypes":["visible","data","styles","animationsConfig","backgroundImage"],"visible":true,"backgroundImage":"","flowGroupId":"page:2:component:edebab26-796f-4ea8-9903-3350542f889a","styles":{"holder":{"flex":1,"borderWidth":0,"borderRightWidth":0,"borderLeftWidth":0,"borderTopWidth":0,"borderBottomWidth":0}},"dynamicProps":[],"expressionProps":[],"events":{}},"reactClass":"Layout","pageId":"page.Page2"}},"app":{"id":346359,"events":{}},"theme":{"$shadow_large":{"formula":"{\"x\":0,\"y\":6,\"blur\":20}","script":"{\"x\":0,\"y\":6,\"blur\":20}","dependencies":[],"functions":[],"isConstant":true},"$shadow_small":{"formula":"{\"x\":0,\"y\":1,\"blur\":1}","script":"{\"x\":0,\"y\":1,\"blur\":1}","dependencies":[],"functions":[],"isConstant":true},"$shadow_medium":{"formula":"{\"x\":0,\"y\":2,\"blur\":12}","script":"{\"x\":0,\"y\":2,\"blur\":12}","dependencies":[],"functions":[],"isConstant":true},"$primaryTabColor":"#323339","$textSize_text_L":{"formula":"{\"fontSize\":16,\"lineHeight\":24}","script":"{\"fontSize\":16,\"lineHeight\":24}","dependencies":[],"functions":[],"isConstant":true},"$textSize_text_M":{"formula":"{\"fontSize\":14,\"lineHeight\":20}","script":"{\"fontSize\":14,\"lineHeight\":20}","dependencies":[],"functions":[],"isConstant":true},"$textSize_text_S":{"formula":"{\"fontSize\":12,\"lineHeight\":16}","script":"{\"fontSize\":12,\"lineHeight\":16}","dependencies":[],"functions":[],"isConstant":true},"$borderWidth_thin":1,"$fontFamilyHeader":"Poppins","$spacing_layout_L":96,"$spacing_layout_M":64,"$spacing_layout_S":40,"$textSize_text_XL":{"formula":"{\"fontSize\":18,\"lineHeight\":24}","script":"{\"fontSize\":18,\"lineHeight\":24}","dependencies":[],"functions":[],"isConstant":true},"$textSize_text_XS":{"formula":"{\"fontSize\":11,\"lineHeight\":16}","script":"{\"fontSize\":11,\"lineHeight\":16}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_L":{"formula":"{\"fontSize\":28,\"lineHeight\":36}","script":"{\"fontSize\":28,\"lineHeight\":36}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_M":{"formula":"{\"fontSize\":24,\"lineHeight\":32}","script":"{\"fontSize\":24,\"lineHeight\":32}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_S":{"formula":"{\"fontSize\":21,\"lineHeight\":28}","script":"{\"fontSize\":21,\"lineHeight\":28}","dependencies":[],"functions":[],"isConstant":true},"$borderWidth_thick":4,"$primaryTabBgColor":"#ffffff","$spacing_layout_XL":128,"$spacing_layout_XS":32,"$textSize_text_3XL":{"formula":"{\"fontSize\":24,\"lineHeight\":32}","script":"{\"fontSize\":24,\"lineHeight\":32}","dependencies":[],"functions":[],"isConstant":true},"$textSize_text_XXL":{"formula":"{\"fontSize\":21,\"lineHeight\":28}","script":"{\"fontSize\":21,\"lineHeight\":28}","dependencies":[],"functions":[],"isConstant":true},"$textSize_text_XXS":{"formula":"{\"fontSize\":10,\"lineHeight\":12}","script":"{\"fontSize\":10,\"lineHeight\":12}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_XL":{"formula":"{\"fontSize\":36,\"lineHeight\":48}","script":"{\"fontSize\":36,\"lineHeight\":48}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_XS":{"formula":"{\"fontSize\":18,\"lineHeight\":24}","script":"{\"fontSize\":18,\"lineHeight\":24}","dependencies":[],"functions":[],"isConstant":true},"$borderWidth_medium":2,"$fontFamily_primary":"Poppins","$letterSpacing_wide":1,"$primaryNavBarColor":"#323339","$spacing_layout_XXL":192,"$textSize_title_3XL":{"formula":"{\"fontSize\":54,\"lineHeight\":64}","script":"{\"fontSize\":54,\"lineHeight\":64}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_4XL":{"formula":"{\"fontSize\":68,\"lineHeight\":76}","script":"{\"fontSize\":68,\"lineHeight\":76}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_5XL":{"formula":"{\"fontSize\":76,\"lineHeight\":88}","script":"{\"fontSize\":76,\"lineHeight\":88}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_6XL":{"formula":"{\"fontSize\":92,\"lineHeight\":104}","script":"{\"fontSize\":92,\"lineHeight\":104}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_XXL":{"formula":"{\"fontSize\":42,\"lineHeight\":52}","script":"{\"fontSize\":42,\"lineHeight\":52}","dependencies":[],"functions":[],"isConstant":true},"$textSize_title_XXS":{"formula":"{\"fontSize\":16,\"lineHeight\":24}","script":"{\"fontSize\":16,\"lineHeight\":24}","dependencies":[],"functions":[],"isConstant":true},"$cornerRadius_square":0,"$letterSpacing_wider":1.6,"$primaryTabTintColor":"#0010CF","$spacing_component_L":16,"$spacing_component_M":12,"$spacing_component_S":8,"$fontFamily_monospace":"Space Mono","$fontFamily_secondary":"Poppins","$letterSpacing_narrow":-0.2,"$letterSpacing_widest":2,"$primaryNavBarBgColor":"#ffffff","$spacing_component_XL":20,"$spacing_component_XS":4,"$borderWidth_extraThin":0.5,"$letterSpacing_default":0,"$smartColorPalette_app":{"formula":"{\"neutral\":\"#7d818d\",\"primary\":\"#0010cf\",\"warning\":\"#f2b663\",\"negative\":\"#f56161\",\"positive\":\"#52c100\",\"secondary\":\"#46bad6\",\"background\":\"#f8f8f8\",\"neutralLowContrast\":\"#a9adb9\",\"primaryLowContrast\":\"#87baf6\",\"neutralHighContrast\":\"#323339\",\"secondaryLowContrast\":\"#8cbdc9\"}","script":"{\"neutral\":\"#7d818d\",\"primary\":\"#0010cf\",\"warning\":\"#f2b663\",\"negative\":\"#f56161\",\"positive\":\"#52c100\",\"secondary\":\"#46bad6\",\"background\":\"#f8f8f8\",\"neutralLowContrast\":\"#a9adb9\",\"primaryLowContrast\":\"#87baf6\",\"neutralHighContrast\":\"#323339\",\"secondaryLowContrast\":\"#8cbdc9\"}","dependencies":[],"functions":[],"isConstant":true},"$spacing_component_XXL":24,"$spacing_component_XXS":2,"$borderWidth_extraThick":12,"$letterSpacing_narrower":-0.4,"$spacing_component_XXXL":28,"$spacing_component_XXXS":1,"$cornerRadius_fullyRound":9999,"$letterSpacing_narrowest":-0.6,"$smartColorPalette_level1":{"formula":"{\"neutral\":\"#7d818d\",\"primary\":\"#0010cf\",\"warning\":\"#f2b663\",\"negative\":\"#f56161\",\"positive\":\"#5ccf07\",\"secondary\":\"#46bad6\",\"background\":\"#ffffff\",\"neutralLowContrast\":\"#a9adb9\",\"primaryLowContrast\":\"#87baf6\",\"neutralHighContrast\":\"#323339\",\"secondaryLowContrast\":\"#8cbdc9\"}","script":"{\"neutral\":\"#7d818d\",\"primary\":\"#0010cf\",\"warning\":\"#f2b663\",\"negative\":\"#f56161\",\"positive\":\"#5ccf07\",\"secondary\":\"#46bad6\",\"background\":\"#ffffff\",\"neutralLowContrast\":\"#a9adb9\",\"primaryLowContrast\":\"#87baf6\",\"neutralHighContrast\":\"#323339\",\"secondaryLowContrast\":\"#8cbdc9\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_level2":{"formula":"{\"neutral\":\"#6a6d77\",\"primary\":\"#040bac\",\"warning\":\"#e7aa42\",\"negative\":\"#e04141\",\"positive\":\"#39b700\",\"secondary\":\"#30a4c0\",\"background\":\"#edeff2\",\"neutralLowContrast\":\"#8a8e99\",\"primaryLowContrast\":\"#618ecd\",\"neutralHighContrast\":\"#212226\",\"secondaryLowContrast\":\"#7caeba\"}","script":"{\"neutral\":\"#6a6d77\",\"primary\":\"#040bac\",\"warning\":\"#e7aa42\",\"negative\":\"#e04141\",\"positive\":\"#39b700\",\"secondary\":\"#30a4c0\",\"background\":\"#edeff2\",\"neutralLowContrast\":\"#8a8e99\",\"primaryLowContrast\":\"#618ecd\",\"neutralHighContrast\":\"#212226\",\"secondaryLowContrast\":\"#7caeba\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_level3":{"formula":"{\"neutral\":\"#61646c\",\"primary\":\"#07089a\",\"warning\":\"#e2a332\",\"negative\":\"#d53131\",\"positive\":\"#2cb200\",\"secondary\":\"#269ab6\",\"background\":\"#e0e1e4\",\"neutralLowContrast\":\"#7b7f8a\",\"primaryLowContrast\":\"#4f78b9\",\"neutralHighContrast\":\"#191a1d\",\"secondaryLowContrast\":\"#74a7b3\"}","script":"{\"neutral\":\"#61646c\",\"primary\":\"#07089a\",\"warning\":\"#e2a332\",\"negative\":\"#d53131\",\"positive\":\"#2cb200\",\"secondary\":\"#269ab6\",\"background\":\"#e0e1e4\",\"neutralLowContrast\":\"#7b7f8a\",\"primaryLowContrast\":\"#4f78b9\",\"neutralHighContrast\":\"#191a1d\",\"secondaryLowContrast\":\"#74a7b3\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_level4":{"formula":"{\"neutral\":\"#575a61\",\"primary\":\"#090588\",\"warning\":\"#dc9d22\",\"negative\":\"#ca2020\",\"positive\":\"#1fac00\",\"secondary\":\"#1b8fab\",\"background\":\"#d2d3d7\",\"neutralLowContrast\":\"#6c6f7a\",\"primaryLowContrast\":\"#3c62a5\",\"neutralHighContrast\":\"#111113\",\"secondaryLowContrast\":\"#6c9fac\"}","script":"{\"neutral\":\"#575a61\",\"primary\":\"#090588\",\"warning\":\"#dc9d22\",\"negative\":\"#ca2020\",\"positive\":\"#1fac00\",\"secondary\":\"#1b8fab\",\"background\":\"#d2d3d7\",\"neutralLowContrast\":\"#6c6f7a\",\"primaryLowContrast\":\"#3c62a5\",\"neutralHighContrast\":\"#111113\",\"secondaryLowContrast\":\"#6c9fac\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_primary":{"formula":"{\"neutral\":\"#a9adb9\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#e25f5f\",\"positive\":\"#81d841\",\"secondary\":\"#ffffff\",\"background\":\"#0010cf\",\"neutralLowContrast\":\"#a9adb9\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#ffffff\",\"secondaryLowContrast\":\"#ffffff\"}","script":"{\"neutral\":\"#a9adb9\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#e25f5f\",\"positive\":\"#81d841\",\"secondary\":\"#ffffff\",\"background\":\"#0010cf\",\"neutralLowContrast\":\"#a9adb9\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#ffffff\",\"secondaryLowContrast\":\"#ffffff\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_warning":{"formula":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffffff\",\"negative\":\"#b50000\",\"positive\":\"#06a200\",\"secondary\":\"#ffffff\",\"background\":\"#efb96e\",\"neutralLowContrast\":\"#4d505a\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","script":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffffff\",\"negative\":\"#b50000\",\"positive\":\"#06a200\",\"secondary\":\"#ffffff\",\"background\":\"#efb96e\",\"neutralLowContrast\":\"#4d505a\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","dependencies":[],"functions":[],"isConstant":true},"$cornerRadius_largeRounding":12,"$cornerRadius_smallRounding":2,"$smartColorPalette_negative":{"formula":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#ffffff\",\"positive\":\"#06a200\",\"secondary\":\"#ffffff\",\"background\":\"#db5f5f\",\"neutralLowContrast\":\"#44464b\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","script":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#ffffff\",\"positive\":\"#06a200\",\"secondary\":\"#ffffff\",\"background\":\"#db5f5f\",\"neutralLowContrast\":\"#44464b\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_positive":{"formula":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#b50000\",\"positive\":\"#ffffff\",\"secondary\":\"#ffffff\",\"background\":\"#53b253\",\"neutralLowContrast\":\"#44464b\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","script":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#b50000\",\"positive\":\"#ffffff\",\"secondary\":\"#ffffff\",\"background\":\"#53b253\",\"neutralLowContrast\":\"#44464b\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","dependencies":[],"functions":[],"isConstant":true},"$cornerRadius_mediumRounding":4,"$primaryTabInactiveTintColor":"#7D818D","$smartColorPalette_darkMedia":{"formula":"{\"neutral\":\"#ffffff\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#e25f5f\",\"positive\":\"#5ccf07\",\"secondary\":\"#ffffff\",\"background\":\"#000000\",\"neutralLowContrast\":\"#ffffff\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#ffffff\",\"secondaryLowContrast\":\"#ffffff\"}","script":"{\"neutral\":\"#ffffff\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#e25f5f\",\"positive\":\"#5ccf07\",\"secondary\":\"#ffffff\",\"background\":\"#000000\",\"neutralLowContrast\":\"#ffffff\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#ffffff\",\"secondaryLowContrast\":\"#ffffff\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_secondary":{"formula":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#b50000\",\"positive\":\"#058900\",\"secondary\":\"#ffffff\",\"background\":\"#7abac9\",\"neutralLowContrast\":\"#4d505a\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","script":"{\"neutral\":\"#44464b\",\"primary\":\"#ffffff\",\"warning\":\"#ffda95\",\"negative\":\"#b50000\",\"positive\":\"#058900\",\"secondary\":\"#ffffff\",\"background\":\"#7abac9\",\"neutralLowContrast\":\"#4d505a\",\"primaryLowContrast\":\"#ffffff\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#ffffff\"}","dependencies":[],"functions":[],"isConstant":true},"$smartColorPalette_lightMedia":{"formula":"{\"neutral\":\"#000000\",\"primary\":\"#000000\",\"warning\":\"#f2b663\",\"negative\":\"#f56161\",\"positive\":\"#52c100\",\"secondary\":\"#000000\",\"background\":\"#ffffff\",\"neutralLowContrast\":\"#000000\",\"primaryLowContrast\":\"#000000\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#000000\"}","script":"{\"neutral\":\"#000000\",\"primary\":\"#000000\",\"warning\":\"#f2b663\",\"negative\":\"#f56161\",\"positive\":\"#52c100\",\"secondary\":\"#000000\",\"background\":\"#ffffff\",\"neutralLowContrast\":\"#000000\",\"primaryLowContrast\":\"#000000\",\"neutralHighContrast\":\"#000000\",\"secondaryLowContrast\":\"#000000\"}","dependencies":[],"functions":[],"isConstant":true}},"fonts":[],"expressions":{"548745a3-a424-401f-a315-d283f97f086e":{"script":"IF(LOOKUP(LOOKUP(repeatedInfo,\"current\"),\"isLast\"),0,LOOKUP(theme,\"$spacing_component_L\"))","formula":"IF(repeatedInfo[\"current\"].isLast, 0, theme[\"$spacing_component_L\"])","dependencies":[["repeatedInfo","current","isLast"],["theme","$spacing_component_L"]]}},"globalCanvas":{"uid":"page.Page2","id":2,"contextId":"canvas/page.Page2","pageId":"page.Page2"},"i18n":{"translations":{},"supportedLanguages":[]},"environment":{"workspaceApp":{"id":346359,"lobby_project_id":null},"mesh_builder":{"deployment_instance_root_domain":"appgyvercloud.com"},"app":{"id":448614,"demo":false,"paid":false,"free":true,"tokens":{"steroids":"b025a71bc185db7958596dd884d2d63cabbe77ed057691665f21256849ffc3cf","data":null,"segmentOwnerId":null,"androidGcmSenderProjectId":null},"auth":{"primary":"anonymous"},"title":"ApiWeb"},"links":{"user_account":"/account"},"endpoints":{"domain":"appgyver.com","auth":"https://rest-auth.appgyver.com/api/v5","data":"https://proxy-api.appgyver.com/v3/","debug":"https://debug-api.appgyver.com/debug_api"},"auth":{"endpoint":"https://rest-auth.appgyver.com/api/v5"},"data":{"type":"rest","endpoint":"https://proxy-api.appgyver.com/v3/","bundle":{"options":{"baseUrl":"https://proxy-api.appgyver.com/v3/","headers":{"steroidsAppId":"448614","steroidsApiKey":"b025a71bc185db7958596dd884d2d63cabbe77ed057691665f21256849ffc3cf","RestAuthorization":""}},"resources":{}},"collections":[],"relations":[],"business_objects":[]},"modules":{"routes":{}},"lastUpdated":"2022-02-07T08:04:25.633Z"},"release":{},"dataResources":{"listUserAll":{"id":"listUserAll","type":"rest","operations":{"list":{"parameters":[]},"retrieve":{"parameters":[{"id":"path_id","type":"string","title":"id","is_static":false,"placement":"path","description":"Resource ID to retrieve","is_optional":false,"placement_key":"id"}],"relative_path":"/{id}"}},"parameters":[],"base_url":"https://x8ki-letl-twmt.n7.xano.io/api:D7AOGrGl/user"}},"connectorConfigurations":{}},"__N_SSG":true}